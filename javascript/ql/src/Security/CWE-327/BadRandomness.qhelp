<!DOCTYPE qhelp PUBLIC
"-//Semmle//qhelp//EN"
"qhelp.dtd">
<qhelp>
	<overview>
		<p>
			Generating secure random numbers can be an important part of creating
			a secure software system, and for that purpose there exists secure APIs
			for creating cryptographically secure random numbers.  
		</p>
		<p>
			However, using some mathematical operations on these cryptographically 
			secure random numbers can create biased results, where some outcomes 
			are more likely than others. 
			Such biased results can make it easier for an attacker to guess the random
			numbers, and thereby break the security of the software system. 
		</p>
	</overview>
	<recommendation>
		<p>
			Be very careful not to introduce bias when performing mathematical operations
			on cryptographically secure random numbers.  
		</p>
		<p>
			If possible, avoid performing mathematical operations on cryptographically secure 
			random numbers at all, and use a preexisting library instead. 
		</p>
	</recommendation>
	<example>
		<p>
			The below example uses the modulo operator to create an array of 10 random digits
			using random bytes as the source for randomness. 
		</p>
		<sample src="examples/bad-random.js" />
		<p>
			The random byte is a uniformly random value between 0 and 255, and thus the result 
			from using the modulo operator is slightly more likely to be between 0 and 5 than 
			between 6 and 9.
		</p>
		<p>
			The issue has been fixed in the code below, where the random byte is discarded if 
			the value was greater than or equal to 250. 
			Thus the modulo operator is used on a uniformly random number between 0 and 249, which
			results in a uniformly random digit between 0 and 9.
		</p>
		<sample src="examples/bad-random-fixed.js" />

	</example>


	<references>
		<li>Stack Overflow: <a href="https://stackoverflow.com/questions/3956478/understanding-randomness">Understanding “randomness”</a>.</li>
		<li>OWASP: <a href="https://owasp.org/www-community/vulnerabilities/Insecure_Randomness">Insecure Randomness</a>.</li>
		<li>OWASP: <a
		href="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#rule---use-strong-approved-authenticated-encryption">Rule
		- Use strong approved cryptographic algorithms</a>.
		</li>
	</references>

</qhelp>
