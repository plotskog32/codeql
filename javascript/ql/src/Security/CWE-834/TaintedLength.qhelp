<!DOCTYPE qhelp PUBLIC
"-//Semmle//qhelp//EN"
"qhelp.dtd">
<qhelp>

<overview>
    <p>
        Iterating the elements of an untrusted object using the 
        <code>.length</code> property can lead to a server looping 
        indefinitely or crashing. Thereby creating a 
        denial-of-service or DOS.
        This happens when an attacker creates a JSON object with an
        absurdly large number in the .length property that the server then 
        loops through.
        <br />
        The problem can also happen when using utility methods from Lodash or 
        Underscore that operate on array-like values. 
        As a simple example of how a DOS can happen, this code will crash most
        servers with an out-of-memory exception 
        <code>_.map({length:999999999})</code>. 
    </p>
</overview>

<recommendation>
    <p>
        The attack is easy to prevent and there are multiple ways of doing so.
        Forcing the user controlled object to be an array or preventing the 
        <code>.length</code> property from being too large can limit the 
        impact of the attack. 
        <br/>
        Alternatively the loop can exit early if the currently iterated element
        is seen to be <code>undefined</code>, as the attacker cannot create an
        array-like object with non-<code>undefined</code> values for an 
        unlimited amount of array elements. 
        <br />
        Accessing a property of the currently iterated element will also
        prevent the attack, as a null-pointer exception will occur in the first
        iteration where the element is <code>undefined</code>.
    </p> 
</recommendation>

<example>
    <p>
        In the example below, a server iterates over a user controlled object
        <code>obj</code> using the <code>obj.length</code> property in order 
        to copy the elements from <code>obj</code> to an array. 
    </p>

    <sample src="examples/TaintedLength.js"/>

    <p>
        This is not secure since an attacker can control the value of 
        <code>obj.length</code>, and thereby cause the loop to loop 
        indefinitely. 
        Here the potential DOS is fixed by enforcing that the user controlled 
        object is an array. 
    </p>

    <sample src="examples/TaintedLength_fixed.js"/>
</example>

<references>
    <li>CWE entry:
        <a href="https://cwe.mitre.org/data/definitions/834.html">CWE-834</a>
    </li>
</references>
</qhelp>
