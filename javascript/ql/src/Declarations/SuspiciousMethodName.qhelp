<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>
In TypeScript the keywords <code>constructor</code> and <code>new</code> are
used to declare constructors in classes and interfaces respectively. 
However, by using the wrong keyword a programmer can accidentally declare e.g. 
a method called <code>constructor</code> inside an interface.
Similarly the keyword <code>function</code> is used to declare functions in 
some contexts, however, using the keyword <code>function</code> inside a class 
or interface results in declaring a method called <code>function</code>.  
</p>

</overview>
<recommendation>

<p>
Declare classes as classes and not as interfaces.
Use the keyword <code>constructor</code> to declare constructors in a class,
use the keyword <code>new</code> to declare constructors inside interfaces, 
and don't use <code>function</code> when declaring an interface that is a 
function.
</p>

</recommendation>
<example>

<p>
The below example declares an interface <code>Point</code> with 2 fields 
and a method called <code>constructor</code>. The interface does not declare
a class <code>Point</code> with a constructor, which was likely what the 
developer meant to create.
</p>
<sample src="examples/SuspiciousMethodName.ts" />

<p>
The below example is a fixed version of the above, where the interface is 
instead declared as a class, thereby describing the type the developer meant 
in the first place.
</p>

<sample src="examples/SuspiciousMethodNameFixed.ts" />

</example>
<references>

</references>
</qhelp>
