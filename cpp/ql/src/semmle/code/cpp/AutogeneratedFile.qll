import semmle.code.cpp.Comments
import semmle.code.cpp.File
import semmle.code.cpp.Preprocessor

/**
 * Holds if comment `c` indicates that it might be in an auto-generated file, for
 * example because it contains the text "auto-generated by".
 */
private predicate autogeneratedComment(Comment c) {
  // ?s = include newlines in anything (`.`)
  // ?i = ignore case

  // auto-generated, automatically generated etc.
  c.getContents().regexpMatch("(?si).*(auto[\\w-]*\\s*?generated).*") or

  // generated by (not used mid-sentence)
  c.getContents().regexpMatch("(?si).*[^a-zA-Z\\s\\*\\r\\n][\\s\\*\\r\\n]*(generated by).*")  or

  // generated file
  c.getContents().regexpMatch("(?si).*(generated file).*")  or

  // file [is] generated
  c.getContents().regexpMatch("(?si).*(file( is)? generated).*")  or

  // changes made in this file will be lost
  c.getContents().regexpMatch("(?si).*(changes made in this file will be lost).*") or
  
  // do not edit/modify
  c.getContents().regexpMatch("(?si).*(do(n't|nt| not) (edit|modify)).*")
}

/**
 * Holds if the file contains `#line` pragmas that refer to a different file.
 * For example, in `parser.c` a pragma `#line 1 "parser.rl"`.
 * Such pragmas usually indicate that the file was automatically generated.
 */
predicate hasPragmaDifferentFile(File f) {
  exists (PreprocessorLine pl, string s |
    pl.getFile() = f and
    pl.getHead().splitAt(" ", 1) = s and /* Zero index is line number, one index is file reference */
    not ("\"" + f.getAbsolutePath() + "\"" = s) and
    not ("\"" + f.getRelativePath() + "\"" = s) and
    not ("\"" + f.getBaseName() + "\"" = s)
  )
}

/**
 * The maximum line number we consider to be "near the beginning" of file `f`.
 */
private int fileHeaderLimit(File f) {
  result = max(int head, int line |
    head <= 5 and
    locations_default(_, underlyingElement(f), head, _, line, _) |
    line
  ) + 5
}

/**
 * Holds if the file is probably an autogenerated file.
 *
 * A file is probably autogenerated if either of the following heuristics
 * hold:
 *   1. There is a comment in the start of the file that matches
 *      'autogenerated', 'generated by', or a similar phrase.
 *   2. There is a `#line` directive referring to a different file.
 */
class AutogeneratedFile extends File {
  cached AutogeneratedFile() {
    exists(Comment c |
      c.getFile() = this and
      c.getLocation().getStartLine() <= fileHeaderLimit(this) and
      autogeneratedComment(c)
    ) or hasPragmaDifferentFile(this)
  }
}
