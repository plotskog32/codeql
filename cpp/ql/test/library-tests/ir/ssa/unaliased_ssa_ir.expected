ssa.cpp:
#   13| int ChiPhiNode(Point*, bool, bool)
#   13|   Block 0
#   13|     v0_0(void)           = EnterFunction               : 
#   13|     mu0_1(unknown)       = AliasedDefinition           : 
#   13|     mu0_2(unknown)       = UnmodeledDefinition         : 
#   13|     r0_3(glval<Point *>) = VariableAddress[p]          : 
#   13|     m0_4(Point *)        = InitializeParameter[p]      : r0_3
#   13|     r0_5(glval<bool>)    = VariableAddress[which1]     : 
#   13|     m0_6(bool)           = InitializeParameter[which1] : r0_5
#   13|     r0_7(glval<bool>)    = VariableAddress[which2]     : 
#   13|     m0_8(bool)           = InitializeParameter[which2] : r0_7
#   14|     r0_9(glval<bool>)    = VariableAddress[which1]     : 
#   14|     r0_10(bool)          = Load                        : r0_9, m0_6
#   14|     v0_11(void)          = ConditionalBranch           : r0_10
#-----|   False -> Block 2
#-----|   True -> Block 1

#   15|   Block 1
#   15|     r1_0(glval<Point *>) = VariableAddress[p] : 
#   15|     r1_1(Point *)        = Load               : r1_0, m0_4
#   15|     r1_2(glval<int>)     = FieldAddress[x]    : r1_1
#   15|     r1_3(int)            = Load               : r1_2, mu0_2
#   15|     r1_4(int)            = Constant[1]        : 
#   15|     r1_5(int)            = Add                : r1_3, r1_4
#   15|     mu1_6(int)           = Store              : r1_2, r1_5
#-----|   Goto -> Block 3

#   18|   Block 2
#   18|     r2_0(glval<Point *>) = VariableAddress[p] : 
#   18|     r2_1(Point *)        = Load               : r2_0, m0_4
#   18|     r2_2(glval<int>)     = FieldAddress[y]    : r2_1
#   18|     r2_3(int)            = Load               : r2_2, mu0_2
#   18|     r2_4(int)            = Constant[1]        : 
#   18|     r2_5(int)            = Add                : r2_3, r2_4
#   18|     mu2_6(int)           = Store              : r2_2, r2_5
#-----|   Goto -> Block 3

#   21|   Block 3
#   21|     r3_0(glval<bool>) = VariableAddress[which2] : 
#   21|     r3_1(bool)        = Load                    : r3_0, m0_8
#   21|     v3_2(void)        = ConditionalBranch       : r3_1
#-----|   False -> Block 5
#-----|   True -> Block 4

#   22|   Block 4
#   22|     r4_0(glval<Point *>) = VariableAddress[p] : 
#   22|     r4_1(Point *)        = Load               : r4_0, m0_4
#   22|     r4_2(glval<int>)     = FieldAddress[x]    : r4_1
#   22|     r4_3(int)            = Load               : r4_2, mu0_2
#   22|     r4_4(int)            = Constant[1]        : 
#   22|     r4_5(int)            = Add                : r4_3, r4_4
#   22|     mu4_6(int)           = Store              : r4_2, r4_5
#-----|   Goto -> Block 6

#   25|   Block 5
#   25|     r5_0(glval<Point *>) = VariableAddress[p] : 
#   25|     r5_1(Point *)        = Load               : r5_0, m0_4
#   25|     r5_2(glval<int>)     = FieldAddress[y]    : r5_1
#   25|     r5_3(int)            = Load               : r5_2, mu0_2
#   25|     r5_4(int)            = Constant[1]        : 
#   25|     r5_5(int)            = Add                : r5_3, r5_4
#   25|     mu5_6(int)           = Store              : r5_2, r5_5
#-----|   Goto -> Block 6

#   28|   Block 6
#   28|     r6_0(glval<int>)     = VariableAddress[#return] : 
#   28|     r6_1(glval<Point *>) = VariableAddress[p]       : 
#   28|     r6_2(Point *)        = Load                     : r6_1, m0_4
#   28|     r6_3(glval<int>)     = FieldAddress[x]          : r6_2
#   28|     r6_4(int)            = Load                     : r6_3, mu0_2
#   28|     r6_5(glval<Point *>) = VariableAddress[p]       : 
#   28|     r6_6(Point *)        = Load                     : r6_5, m0_4
#   28|     r6_7(glval<int>)     = FieldAddress[y]          : r6_6
#   28|     r6_8(int)            = Load                     : r6_7, mu0_2
#   28|     r6_9(int)            = Add                      : r6_4, r6_8
#   28|     m6_10(int)           = Store                    : r6_0, r6_9
#   13|     r6_11(glval<int>)    = VariableAddress[#return] : 
#   13|     v6_12(void)          = ReturnValue              : r6_11, m6_10
#   13|     v6_13(void)          = UnmodeledUse             : mu*
#   13|     v6_14(void)          = ExitFunction             : 

#   31| int UnreachableViaGoto()
#   31|   Block 0
#   31|     v0_0(void)       = EnterFunction            : 
#   31|     mu0_1(unknown)   = AliasedDefinition        : 
#   31|     mu0_2(unknown)   = UnmodeledDefinition      : 
#   32|     v0_3(void)       = NoOp                     : 
#   34|     v0_4(void)       = NoOp                     : 
#   35|     r0_5(glval<int>) = VariableAddress[#return] : 
#   35|     r0_6(int)        = Constant[0]              : 
#   35|     m0_7(int)        = Store                    : r0_5, r0_6
#   31|     r0_8(glval<int>) = VariableAddress[#return] : 
#   31|     v0_9(void)       = ReturnValue              : r0_8, m0_7
#   31|     v0_10(void)      = UnmodeledUse             : mu*
#   31|     v0_11(void)      = ExitFunction             : 

#   38| int UnreachableIf(bool)
#   38|   Block 0
#   38|     v0_0(void)         = EnterFunction          : 
#   38|     mu0_1(unknown)     = AliasedDefinition      : 
#   38|     mu0_2(unknown)     = UnmodeledDefinition    : 
#   38|     r0_3(glval<bool>)  = VariableAddress[b]     : 
#   38|     m0_4(bool)         = InitializeParameter[b] : r0_3
#   39|     r0_5(glval<int>)   = VariableAddress[x]     : 
#   39|     r0_6(int)          = Constant[5]            : 
#   39|     m0_7(int)          = Store                  : r0_5, r0_6
#   40|     r0_8(glval<int>)   = VariableAddress[y]     : 
#   40|     r0_9(int)          = Constant[10]           : 
#   40|     m0_10(int)         = Store                  : r0_8, r0_9
#   41|     r0_11(glval<bool>) = VariableAddress[b]     : 
#   41|     r0_12(bool)        = Load                   : r0_11, m0_4
#   41|     v0_13(void)        = ConditionalBranch      : r0_12
#-----|   False -> Block 5
#-----|   True -> Block 2

#   38|   Block 1
#   38|     m1_0(int)        = Phi                      : from 3:m3_2, from 4:m4_2, from 6:m6_2, from 7:m7_2
#   38|     r1_1(glval<int>) = VariableAddress[#return] : 
#   38|     v1_2(void)       = ReturnValue              : r1_1, m1_0
#   38|     v1_3(void)       = UnmodeledUse             : mu*
#   38|     v1_4(void)       = ExitFunction             : 

#   42|   Block 2
#   42|     r2_0(glval<int>) = VariableAddress[x] : 
#   42|     r2_1(int)        = Load               : r2_0, m0_7
#   42|     r2_2(glval<int>) = VariableAddress[y] : 
#   42|     r2_3(int)        = Load               : r2_2, m0_10
#   42|     r2_4(bool)       = CompareEQ          : r2_1, r2_3
#   42|     v2_5(void)       = ConditionalBranch  : r2_4
#-----|   False -> Block 4
#-----|   True -> Block 3

#   43|   Block 3
#   43|     r3_0(glval<int>) = VariableAddress[#return] : 
#   43|     r3_1(int)        = Constant[1]              : 
#   43|     m3_2(int)        = Store                    : r3_0, r3_1
#-----|   Goto -> Block 1

#   46|   Block 4
#   46|     r4_0(glval<int>) = VariableAddress[#return] : 
#   46|     r4_1(int)        = Constant[0]              : 
#   46|     m4_2(int)        = Store                    : r4_0, r4_1
#-----|   Goto -> Block 1

#   50|   Block 5
#   50|     r5_0(glval<int>) = VariableAddress[x] : 
#   50|     r5_1(int)        = Load               : r5_0, m0_7
#   50|     r5_2(glval<int>) = VariableAddress[y] : 
#   50|     r5_3(int)        = Load               : r5_2, m0_10
#   50|     r5_4(bool)       = CompareLT          : r5_1, r5_3
#   50|     v5_5(void)       = ConditionalBranch  : r5_4
#-----|   False -> Block 7
#-----|   True -> Block 6

#   51|   Block 6
#   51|     r6_0(glval<int>) = VariableAddress[#return] : 
#   51|     r6_1(int)        = Constant[0]              : 
#   51|     m6_2(int)        = Store                    : r6_0, r6_1
#-----|   Goto -> Block 1

#   54|   Block 7
#   54|     r7_0(glval<int>) = VariableAddress[#return] : 
#   54|     r7_1(int)        = Constant[1]              : 
#   54|     m7_2(int)        = Store                    : r7_0, r7_1
#-----|   Goto -> Block 1

#   59| int DoWhileFalse()
#   59|   Block 0
#   59|     v0_0(void)       = EnterFunction       : 
#   59|     mu0_1(unknown)   = AliasedDefinition   : 
#   59|     mu0_2(unknown)   = UnmodeledDefinition : 
#   60|     r0_3(glval<int>) = VariableAddress[i]  : 
#   60|     r0_4(int)        = Constant[0]         : 
#   60|     m0_5(int)        = Store               : r0_3, r0_4
#   62|     r0_6(glval<int>) = VariableAddress[i]  : 
#   62|     r0_7(int)        = Load                : r0_6, m0_5
#   62|     r0_8(int)        = Constant[1]         : 
#   62|     r0_9(int)        = Add                 : r0_7, r0_8
#   62|     m0_10(int)       = Store               : r0_6, r0_9
#   63|     r0_11(bool)      = Constant[0]         : 
#   63|     v0_12(void)      = ConditionalBranch   : r0_11
#-----|   False -> Block 1
#-----|   True -> Block 2

#   65|   Block 1
#   65|     r1_0(glval<int>) = VariableAddress[#return] : 
#   65|     r1_1(glval<int>) = VariableAddress[i]       : 
#   65|     r1_2(int)        = Load                     : r1_1, m0_10
#   65|     m1_3(int)        = Store                    : r1_0, r1_2
#   59|     r1_4(glval<int>) = VariableAddress[#return] : 
#   59|     v1_5(void)       = ReturnValue              : r1_4, m1_3
#   59|     v1_6(void)       = UnmodeledUse             : mu*
#   59|     v1_7(void)       = ExitFunction             : 

#   59|   Block 2
#   59|     v2_0(void) = Unreached : 

#   68| void chiNodeAtEndOfLoop(int, char*)
#   68|   Block 0
#   68|     v0_0(void)          = EnterFunction          : 
#   68|     mu0_1(unknown)      = AliasedDefinition      : 
#   68|     mu0_2(unknown)      = UnmodeledDefinition    : 
#   68|     r0_3(glval<int>)    = VariableAddress[n]     : 
#   68|     m0_4(int)           = InitializeParameter[n] : r0_3
#   68|     r0_5(glval<char *>) = VariableAddress[p]     : 
#   68|     m0_6(char *)        = InitializeParameter[p] : r0_5
#-----|   Goto -> Block 3

#   70|   Block 1
#   70|     r1_0(char)          = Constant[0]        : 
#   70|     r1_1(glval<char *>) = VariableAddress[p] : 
#   70|     r1_2(char *)        = Load               : r1_1, m3_1
#   70|     r1_3(int)           = Constant[1]        : 
#   70|     r1_4(char *)        = PointerAdd[1]      : r1_2, r1_3
#   70|     m1_5(char *)        = Store              : r1_1, r1_4
#   70|     mu1_6(char)         = Store              : r1_2, r1_0
#-----|   Goto (back edge) -> Block 3

#   71|   Block 2
#   71|     v2_0(void) = NoOp         : 
#   68|     v2_1(void) = ReturnVoid   : 
#   68|     v2_2(void) = UnmodeledUse : mu*
#   68|     v2_3(void) = ExitFunction : 

#   69|   Block 3
#   69|     m3_0(int)        = Phi                : from 0:m0_4, from 1:m3_6
#   69|     m3_1(char *)     = Phi                : from 0:m0_6, from 1:m1_5
#   69|     r3_2(glval<int>) = VariableAddress[n] : 
#   69|     r3_3(int)        = Load               : r3_2, m3_0
#   69|     r3_4(int)        = Constant[1]        : 
#   69|     r3_5(int)        = Sub                : r3_3, r3_4
#   69|     m3_6(int)        = Store              : r3_2, r3_5
#   69|     r3_7(int)        = Constant[0]        : 
#   69|     r3_8(bool)       = CompareGT          : r3_3, r3_7
#   69|     v3_9(void)       = ConditionalBranch  : r3_8
#-----|   False -> Block 2
#-----|   True -> Block 1
