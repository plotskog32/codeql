array.cs:
#    2| one_dim_init_acc
#    2|   Block 0
#    2|     v0_0(Void)            = EnterFunction            : 
#    2|     mu0_1(Object)         = AliasedDefinition        : 
#    2|     mu0_2(Object)         = UnmodeledDefinition      : 
#    2|     r0_3(lval<ArrayTest>) = InitializeThis           : 
#    3|     r0_4(lval<Int32[]>)   = VariableAddress[one_dim] : 
#    3|     mu0_5(Int32[])        = Uninitialized[one_dim]   : &:r0_4
#    3|     r0_6(Int32)           = Constant[0]              : 
#    3|     r0_7(lval<Int32>)     = PointerAdd               : r0_4, r0_6
#    3|     r0_8(Int32)           = Constant[100]            : 
#    3|     mu0_9(Int32)          = Store                    : &:r0_7, r0_8
#    3|     r0_10(Int32)          = Constant[1]              : 
#    3|     r0_11(lval<Int32>)    = PointerAdd               : r0_4, r0_10
#    3|     r0_12(Int32)          = Constant[101]            : 
#    3|     mu0_13(Int32)         = Store                    : &:r0_11, r0_12
#    3|     r0_14(Int32)          = Constant[2]              : 
#    3|     r0_15(lval<Int32>)    = PointerAdd               : r0_4, r0_14
#    3|     r0_16(Int32)          = Constant[102]            : 
#    3|     mu0_17(Int32)         = Store                    : &:r0_15, r0_16
#    4|     r0_18(Int32)          = Constant[1000]           : 
#    4|     r0_19(lval<Int32[]>)  = VariableAddress[one_dim] : 
#    4|     r0_20(Int32[])        = ElementsAddress          : &:r0_19
#    4|     r0_21(Int32)          = Constant[0]              : 
#    4|     r0_22(Int32[])        = PointerAdd[4]            : r0_20, r0_21
#    4|     mu0_23(Int32)         = Store                    : r0_18
#    5|     r0_24(lval<Int32[]>)  = VariableAddress[one_dim] : 
#    5|     r0_25(Int32[])        = ElementsAddress          : &:r0_24
#    5|     r0_26(Int32)          = Constant[0]              : 
#    5|     r0_27(Int32[])        = PointerAdd[4]            : r0_25, r0_26
#    5|     r0_28(Int32)          = Load                     : ~mu0_2
#    5|     r0_29(lval<Int32[]>)  = VariableAddress[one_dim] : 
#    5|     r0_30(Int32[])        = ElementsAddress          : &:r0_29
#    5|     r0_31(Int32)          = Constant[1]              : 
#    5|     r0_32(Int32[])        = PointerAdd[4]            : r0_30, r0_31
#    5|     mu0_33(Int32)         = Store                    : r0_28
#    6|     r0_34(Int32)          = Constant[1003]           : 
#    6|     r0_35(lval<Int32[]>)  = VariableAddress[one_dim] : 
#    6|     r0_36(Int32[])        = ElementsAddress          : &:r0_35
#    6|     r0_37(Int32)          = Constant[1]              : 
#    6|     r0_38(Int32[])        = PointerAdd[4]            : r0_36, r0_37
#    6|     mu0_39(Int32)         = Store                    : r0_34
#    2|     v0_40(Void)           = ReturnVoid               : 
#    2|     v0_41(Void)           = UnmodeledUse             : mu*
#    2|     v0_42(Void)           = ExitFunction             : 

#    9| twod_and_init_acc
#    9|   Block 0
#    9|     v0_0(Void)            = EnterFunction       : 
#    9|     mu0_1(Object)         = AliasedDefinition   : 
#    9|     mu0_2(Object)         = UnmodeledDefinition : 
#    9|     r0_3(lval<ArrayTest>) = InitializeThis      : 
#   10|     r0_4(lval<Int32[,]>)  = VariableAddress[a]  : 
#   10|     mu0_5(Int32[,])       = Uninitialized[a]    : &:r0_4
#   10|     r0_6(Int32)           = Constant[0]         : 
#   10|     r0_7(lval<null>)      = PointerAdd          : r0_4, r0_6
#   10|     r0_8(Int32)           = Constant[0]         : 
#   10|     r0_9(lval<Int32>)     = PointerAdd          : r0_7, r0_8
#   10|     r0_10(Int32)          = Constant[100]       : 
#   10|     mu0_11(Int32)         = Store               : &:r0_9, r0_10
#   10|     r0_12(Int32)          = Constant[1]         : 
#   10|     r0_13(lval<Int32>)    = PointerAdd          : r0_7, r0_12
#   10|     r0_14(Int32)          = Constant[101]       : 
#   10|     mu0_15(Int32)         = Store               : &:r0_13, r0_14
#   10|     r0_16(Int32)          = Constant[1]         : 
#   10|     r0_17(lval<null>)     = PointerAdd          : r0_4, r0_16
#   10|     r0_18(Int32)          = Constant[0]         : 
#   10|     r0_19(lval<Int32>)    = PointerAdd          : r0_17, r0_18
#   10|     r0_20(Int32)          = Constant[102]       : 
#   10|     mu0_21(Int32)         = Store               : &:r0_19, r0_20
#   10|     r0_22(Int32)          = Constant[1]         : 
#   10|     r0_23(lval<Int32>)    = PointerAdd          : r0_17, r0_22
#   10|     r0_24(Int32)          = Constant[103]       : 
#   10|     mu0_25(Int32)         = Store               : &:r0_23, r0_24
#   11|     r0_26(lval<Int32[,]>) = VariableAddress[b]  : 
#   11|     mu0_27(Int32[,])      = Uninitialized[b]    : &:r0_26
#   12|     r0_28(lval<Int32[,]>) = VariableAddress[c]  : 
#   12|     mu0_29(Int32[,])      = Uninitialized[c]    : &:r0_28
#   12|     r0_30(Int32)          = Constant[0]         : 
#   12|     r0_31(lval<null>)     = PointerAdd          : r0_28, r0_30
#   12|     r0_32(Int32)          = Constant[0]         : 
#   12|     r0_33(lval<Int32>)    = PointerAdd          : r0_31, r0_32
#   12|     r0_34(Int32)          = Constant[100]       : 
#   12|     mu0_35(Int32)         = Store               : &:r0_33, r0_34
#   12|     r0_36(Int32)          = Constant[1]         : 
#   12|     r0_37(lval<Int32>)    = PointerAdd          : r0_31, r0_36
#   12|     r0_38(Int32)          = Constant[101]       : 
#   12|     mu0_39(Int32)         = Store               : &:r0_37, r0_38
#   12|     r0_40(Int32)          = Constant[1]         : 
#   12|     r0_41(lval<null>)     = PointerAdd          : r0_28, r0_40
#   12|     r0_42(Int32)          = Constant[0]         : 
#   12|     r0_43(lval<Int32>)    = PointerAdd          : r0_41, r0_42
#   12|     r0_44(Int32)          = Constant[102]       : 
#   12|     mu0_45(Int32)         = Store               : &:r0_43, r0_44
#   12|     r0_46(Int32)          = Constant[1]         : 
#   12|     r0_47(lval<Int32>)    = PointerAdd          : r0_41, r0_46
#   12|     r0_48(Int32)          = Constant[103]       : 
#   12|     mu0_49(Int32)         = Store               : &:r0_47, r0_48
#   13|     r0_50(lval<Int32[,]>) = VariableAddress[d]  : 
#   13|     mu0_51(Int32[,])      = Uninitialized[d]    : &:r0_50
#   13|     r0_52(Int32)          = Constant[0]         : 
#   13|     r0_53(lval<null>)     = PointerAdd          : r0_50, r0_52
#   13|     r0_54(Int32)          = Constant[0]         : 
#   13|     r0_55(lval<Int32>)    = PointerAdd          : r0_53, r0_54
#   13|     r0_56(Int32)          = Constant[100]       : 
#   13|     mu0_57(Int32)         = Store               : &:r0_55, r0_56
#   13|     r0_58(Int32)          = Constant[1]         : 
#   13|     r0_59(lval<Int32>)    = PointerAdd          : r0_53, r0_58
#   13|     r0_60(Int32)          = Constant[101]       : 
#   13|     mu0_61(Int32)         = Store               : &:r0_59, r0_60
#   13|     r0_62(Int32)          = Constant[1]         : 
#   13|     r0_63(lval<null>)     = PointerAdd          : r0_50, r0_62
#   13|     r0_64(Int32)          = Constant[0]         : 
#   13|     r0_65(lval<Int32>)    = PointerAdd          : r0_63, r0_64
#   13|     r0_66(Int32)          = Constant[102]       : 
#   13|     mu0_67(Int32)         = Store               : &:r0_65, r0_66
#   13|     r0_68(Int32)          = Constant[1]         : 
#   13|     r0_69(lval<Int32>)    = PointerAdd          : r0_63, r0_68
#   13|     r0_70(Int32)          = Constant[103]       : 
#   13|     mu0_71(Int32)         = Store               : &:r0_69, r0_70
#   14|     r0_72(lval<Int32[,]>) = VariableAddress[e]  : 
#   14|     r0_73(lval<Int32[,]>) = VariableAddress[a]  : 
#   14|     mu0_74(Int32[,])      = Store               : &:r0_72, r0_73
#   15|     r0_75(Int32)          = Constant[-1]        : 
#   15|     r0_76(lval<Int32[,]>) = VariableAddress[e]  : 
#   15|     r0_77(Int32[,])       = ElementsAddress     : &:r0_76
#   15|     r0_78(Int32)          = Constant[1]         : 
#   15|     r0_79(Int32[,])       = PointerAdd[4]       : r0_77, r0_78
#   15|     r0_80(Int32[])        = ElementsAddress     : r0_79
#   15|     r0_81(Int32)          = Constant[1]         : 
#   15|     r0_82(Int32[,])       = PointerAdd[4]       : r0_80, r0_81
#   15|     mu0_83(Int32)         = Store               : r0_75
#    9|     v0_84(Void)           = ReturnVoid          : 
#    9|     v0_85(Void)           = UnmodeledUse        : mu*
#    9|     v0_86(Void)           = ExitFunction        : 

func_with_param_call.cs:
#    4| f
#    4|   Block 0
#    4|     v0_0(Void)                        = EnterFunction            : 
#    4|     mu0_1(null)                       = AliasedDefinition        : 
#    4|     mu0_2(null)                       = UnmodeledDefinition      : 
#    4|     r0_3(glval<test_call_with_param>) = InitializeThis           : 
#    4|     r0_4(glval<Int32>)                = VariableAddress[x]       : 
#    4|     mu0_5(Int32)                      = InitializeParameter[x]   : &:r0_4
#    4|     r0_6(glval<Int32>)                = VariableAddress[y]       : 
#    4|     mu0_7(Int32)                      = InitializeParameter[y]   : &:r0_6
#    5|     r0_8(glval<Int32>)                = VariableAddress[#return] : 
#    5|     r0_9(glval<Int32>)                = VariableAddress[x]       : 
#    5|     r0_10(Int32)                      = Load                     : &:r0_9, ~mu0_2
#    5|     r0_11(glval<Int32>)               = VariableAddress[y]       : 
#    5|     r0_12(Int32)                      = Load                     : &:r0_11, ~mu0_2
#    5|     r0_13(Int32)                      = Add                      : r0_10, r0_12
#    5|     mu0_14(Int32)                     = Store                    : &:r0_8, r0_13
#    4|     r0_15(glval<Int32>)               = VariableAddress[#return] : 
#    4|     v0_16(Void)                       = ReturnValue              : &:r0_15, ~mu0_2
#    4|     v0_17(Void)                       = UnmodeledUse             : mu*
#    4|     v0_18(Void)                       = ExitFunction             : 

#    8| g
#    8|   Block 0
#    8|     v0_0(Void)                        = EnterFunction            : 
#    8|     mu0_1(null)                       = AliasedDefinition        : 
#    8|     mu0_2(null)                       = UnmodeledDefinition      : 
#    8|     r0_3(glval<test_call_with_param>) = InitializeThis           : 
#    9|     r0_4(glval<Int32>)                = VariableAddress[#return] : 
#    9|     r0_5(glval<Int32>)                = FunctionAddress[f]       : 
#    9|     r0_6(Int32)                       = Constant[2]              : 
#    9|     r0_7(Int32)                       = Constant[3]              : 
#    9|     r0_8(Int32)                       = Call                     : func:r0_5, 0:r0_6, 1:r0_7
#    9|     mu0_9(null)                       = ^CallSideEffect          : ~mu0_2
#    9|     mu0_10(Int32)                     = Store                    : &:r0_4, r0_8
#    8|     r0_11(glval<Int32>)               = VariableAddress[#return] : 
#    8|     v0_12(Void)                       = ReturnValue              : &:r0_11, ~mu0_2
#    8|     v0_13(Void)                       = UnmodeledUse             : mu*
#    8|     v0_14(Void)                       = ExitFunction             : 

simple_call.cs:
#    4| f
#    4|   Block 0
#    4|     v0_0(Void)                    = EnterFunction            : 
#    4|     mu0_1(null)                   = AliasedDefinition        : 
#    4|     mu0_2(null)                   = UnmodeledDefinition      : 
#    4|     r0_3(glval<test_simple_call>) = InitializeThis           : 
#    5|     r0_4(glval<Int32>)            = VariableAddress[#return] : 
#    5|     r0_5(Int32)                   = Constant[0]              : 
#    5|     mu0_6(Int32)                  = Store                    : &:r0_4, r0_5
#    4|     r0_7(glval<Int32>)            = VariableAddress[#return] : 
#    4|     v0_8(Void)                    = ReturnValue              : &:r0_7, ~mu0_2
#    4|     v0_9(Void)                    = UnmodeledUse             : mu*
#    4|     v0_10(Void)                   = ExitFunction             : 

#    8| g
#    8|   Block 0
#    8|     v0_0(Void)                    = EnterFunction            : 
#    8|     mu0_1(null)                   = AliasedDefinition        : 
#    8|     mu0_2(null)                   = UnmodeledDefinition      : 
#    8|     r0_3(glval<test_simple_call>) = InitializeThis           : 
#    9|     r0_4(glval<Int32>)            = VariableAddress[#return] : 
#    9|     r0_5(glval<Int32>)            = FunctionAddress[f]       : 
#    9|     r0_6(Int32)                   = Call                     : func:r0_5
#    9|     mu0_7(null)                   = ^CallSideEffect          : ~mu0_2
#    9|     mu0_8(Int32)                  = Store                    : &:r0_4, r0_6
#    8|     r0_9(glval<Int32>)            = VariableAddress[#return] : 
#    8|     v0_10(Void)                   = ReturnValue              : &:r0_9, ~mu0_2
#    8|     v0_11(Void)                   = UnmodeledUse             : mu*
#    8|     v0_12(Void)                   = ExitFunction             : 

simple_function.cs:
#    4| f
#    4|   Block 0
#    4|     v0_0(Void)                        = EnterFunction            : 
#    4|     mu0_1(null)                       = AliasedDefinition        : 
#    4|     mu0_2(null)                       = UnmodeledDefinition      : 
#    4|     r0_3(glval<test_simple_function>) = InitializeThis           : 
#    5|     r0_4(glval<Int32>)                = VariableAddress[#return] : 
#    5|     r0_5(Int32)                       = Constant[0]              : 
#    5|     mu0_6(Int32)                      = Store                    : &:r0_4, r0_5
#    4|     r0_7(glval<Int32>)                = VariableAddress[#return] : 
#    4|     v0_8(Void)                        = ReturnValue              : &:r0_7, ~mu0_2
#    4|     v0_9(Void)                        = UnmodeledUse             : mu*
#    4|     v0_10(Void)                       = ExitFunction             : 

stmts.cs:
#    4| test_if
#    4|   Block 0
#    4|     v0_0(Void)             = EnterFunction          : 
#    4|     mu0_1(Object)          = AliasedDefinition      : 
#    4|     mu0_2(Object)          = UnmodeledDefinition    : 
#    4|     r0_3(lval<test_stmts>) = InitializeThis         : 
#    4|     r0_4(lval<Int32>)      = VariableAddress[x]     : 
#    4|     mu0_5(Int32)           = InitializeParameter[x] : &:r0_4
#    5|     r0_6(lval<Int32>)      = VariableAddress[x]     : 
#    5|     r0_7(Int32)            = Load                   : &:r0_6, ~mu0_2
#    5|     r0_8(Int32)            = Constant[5]            : 
#    5|     r0_9(Boolean)          = CompareEQ              : r0_7, r0_8
#    5|     v0_10(Void)            = ConditionalBranch      : r0_9
#-----|   False -> Block 2
#-----|   True -> Block 3

#    4|   Block 1
#    4|     r1_0(lval<Int32>) = VariableAddress[#return] : 
#    4|     v1_1(Void)        = ReturnValue              : &:r1_0, ~mu0_2
#    4|     v1_2(Void)        = UnmodeledUse             : mu*
#    4|     v1_3(Void)        = ExitFunction             : 

#    8|   Block 2
#    8|     r2_0(lval<Int32>) = VariableAddress[#return] : 
#    8|     r2_1(Int32)       = Constant[1]              : 
#    8|     mu2_2(Int32)      = Store                    : &:r2_0, r2_1
#-----|   Goto -> Block 1

#    6|   Block 3
#    6|     r3_0(lval<Int32>) = VariableAddress[#return] : 
#    6|     r3_1(Int32)       = Constant[0]              : 
#    6|     mu3_2(Int32)      = Store                    : &:r3_0, r3_1
#-----|   Goto -> Block 1

#   11| test_while
#   11|   Block 0
#   11|     v0_0(Void)             = EnterFunction          : 
#   11|     mu0_1(Object)          = AliasedDefinition      : 
#   11|     mu0_2(Object)          = UnmodeledDefinition    : 
#   11|     r0_3(lval<test_stmts>) = InitializeThis         : 
#   11|     r0_4(lval<Int32>)      = VariableAddress[x]     : 
#   11|     mu0_5(Int32)           = InitializeParameter[x] : &:r0_4
#   12|     r0_6(lval<Int32>)      = VariableAddress[i]     : 
#   12|     r0_7(Int32)            = Constant[0]            : 
#   12|     mu0_8(Int32)           = Store                  : &:r0_6, r0_7
#-----|   Goto -> Block 2

#   11|   Block 1
#   11|     v1_0(Void) = ReturnVoid   : 
#   11|     v1_1(Void) = UnmodeledUse : mu*
#   11|     v1_2(Void) = ExitFunction : 

#   13|   Block 2
#   13|     r2_0(lval<Int32>) = VariableAddress[i] : 
#   13|     r2_1(Int32)       = Load               : &:r2_0, ~mu0_2
#   13|     r2_2(Int32)       = Constant[10]       : 
#   13|     r2_3(Boolean)     = CompareLT          : r2_1, r2_2
#   13|     v2_4(Void)        = ConditionalBranch  : r2_3
#-----|   False -> Block 1
#-----|   True -> Block 3

#   14|   Block 3
#   14|     r3_0(lval<Int32>) = VariableAddress[x] : 
#   14|     r3_1(Int32)       = Load               : &:r3_0, ~mu0_2
#   14|     r3_2(Int32)       = Constant[1]        : 
#   14|     r3_3(Int32)       = Add                : r3_1, r3_2
#   14|     r3_4(lval<Int32>) = VariableAddress[x] : 
#   14|     mu3_5(Int32)      = Store              : &:r3_4, r3_3
#-----|   Goto (back edge) -> Block 2

#   18| test_switch
#   18|   Block 0
#   18|     v0_0(Void)             = EnterFunction               : 
#   18|     mu0_1(Object)          = AliasedDefinition           : 
#   18|     mu0_2(Object)          = UnmodeledDefinition         : 
#   18|     r0_3(lval<test_stmts>) = InitializeThis              : 
#   18|     r0_4(lval<Int32>)      = VariableAddress[y]          : 
#   18|     mu0_5(Int32)           = InitializeParameter[y]      : &:r0_4
#   19|     r0_6(lval<Int32>)      = VariableAddress[caseSwitch] : 
#   19|     r0_7(Int32)            = Constant[1]                 : 
#   19|     mu0_8(Int32)           = Store                       : &:r0_6, r0_7
#   20|     r0_9(lval<Int32>)      = VariableAddress[select]     : 
#   20|     r0_10(Int32)           = Constant[0]                 : 
#   20|     mu0_11(Int32)          = Store                       : &:r0_9, r0_10

#   34|   Block 1
#   34|     r1_0(lval<Int32>) = VariableAddress[#return] : 
#   34|     r1_1(lval<Int32>) = VariableAddress[select]  : 
#   34|     r1_2(Int32)       = Load                     : &:r1_1, ~mu0_2
#   34|     mu1_3(Int32)      = Store                    : &:r1_0, r1_2
#-----|   Goto -> Block 10

#   24|   Block 2
#   24|     v2_0(Void) = NoOp : 

#   25|   Block 2
#   25|     v2_0(Void) = NoOp : 

#   26|   Block 2
#   26|     v2_0(Void) = NoOp : 
#-----|   Goto -> Block 11

#   27|   Block 2
#   27|     v2_0(Void) = NoOp : 

#   29|   Block 2
#   29|     v2_0(Void) = NoOp : 
#-----|   Goto -> Block 11

#   30|   Block 2
#   30|     v2_0(Void) = NoOp : 

#   32|   Block 2
#   32|     v2_0(Void) = NoOp : 
#-----|   Goto (back edge) -> Block 2

#   33|   Block 2
#   33|     v2_0(Void) = NoOp : 

#   18|   Block 10
#   18|     r10_0(lval<Int32>) = VariableAddress[#return] : 
#   18|     v10_1(Void)        = ReturnValue              : &:r10_0, ~mu0_2
#   18|     v10_2(Void)        = UnmodeledUse             : mu*
#   18|     v10_3(Void)        = ExitFunction             : 

#   36|   Block 11
#   36|     r11_0(Int32)       = Constant[1000]           : 
#   36|     r11_1(lval<Int32>) = VariableAddress[select]  : 
#   36|     mu11_2(Int32)      = Store                    : &:r11_1, r11_0
#   37|     r11_3(lval<Int32>) = VariableAddress[#return] : 
#   37|     r11_4(Int32)       = Constant[0]              : 
#   37|     mu11_5(Int32)      = Store                    : &:r11_3, r11_4
#-----|   Goto -> Block 10

#   22|   Block 12
#   22|     r12_0(lval<Int32>) = VariableAddress[caseSwitch] : 
#   22|     r12_1(Int32)       = Load                        : &:r12_0, ~mu0_2

#   28|   Block 13
#   28|     r13_0(Int32)       = Constant[100]           : 
#   28|     r13_1(lval<Int32>) = VariableAddress[select] : 
#   28|     mu13_2(Int32)      = Store                   : &:r13_1, r13_0

#   31|   Block 13
#   31|     r13_0(Int32)       = Constant[101]           : 
#   31|     r13_1(lval<Int32>) = VariableAddress[select] : 
#   31|     mu13_2(Int32)      = Store                   : &:r13_1, r13_0

#   40| test_trycatchfinally
#   40|   Block 0
#   40|     v0_0(Void)             = EnterFunction       : 
#   40|     mu0_1(Object)          = AliasedDefinition   : 
#   40|     mu0_2(Object)          = UnmodeledDefinition : 
#   40|     r0_3(lval<test_stmts>) = InitializeThis      : 
#   41|     r0_4(lval<Int32>)      = VariableAddress[x]  : 
#   41|     r0_5(Int32)            = Constant[5]         : 
#   41|     mu0_6(Int32)           = Store               : &:r0_4, r0_5
#   44|     r0_7(lval<Int32>)      = VariableAddress[x]  : 
#   44|     r0_8(Int32)            = Load                : &:r0_7, ~mu0_2
#   44|     r0_9(Int32)            = Constant[0]         : 
#   44|     r0_10(Boolean)         = CompareNE           : r0_8, r0_9
#   44|     v0_11(Void)            = ConditionalBranch   : r0_10
#-----|   False -> Block 6
#-----|   True -> Block 5

#   45|   Block 1
#   45|     r1_0(Exception)       = NewObj                     : 
#   45|     r1_1(lval<Exception>) = FunctionAddress[Exception] : 
#   45|     r1_2(Exception)       = Call                       : func:r1_1, this:r1_0
#   45|     v1_3(Void)            = ^CallSideEffect            : ~mu0_2

#   40|   Block 2
#   40|     v2_0(Void) = ReturnVoid : 
#-----|   Goto -> Block 3

#   40|   Block 3
#   40|     v3_0(Void) = UnmodeledUse : mu*
#   40|     v3_1(Void) = ExitFunction : 

#   40|   Block 4
#   40|     v4_0(Void) = Unwind : 
#-----|   Goto -> Block 3

#   45|   Block 5
#   45|     v5_0(Void)            = NoOp                   : 
#   48|     v5_1(Void)            = CatchByType[Exception] : 
#   50|     r5_4(Int32)           = Constant[1]            : 
#   50|     r5_5(lval<Int32>)     = VariableAddress[x]     : 
#   50|     mu5_6(Int32)          = Store                  : &:r5_5, r5_4
#   54|     r5_7(Int32)           = Constant[2]            : 
#   54|     r5_8(lval<Int32>)     = VariableAddress[x]     : 
#   54|     mu5_9(Int32)          = Store                  : &:r5_8, r5_7
#-----|   Goto -> Block 2

#   46|   Block 6
#   46|     r6_0(Int32)       = Constant[0]        : 
#   46|     r6_1(lval<Int32>) = VariableAddress[x] : 
#   46|     mu6_2(Int32)      = Store              : &:r6_1, r6_0
#-----|   Goto -> Block 2

variables.cs:
#    4| f
#    4|   Block 0
#    4|     v0_0(Void)                 = EnterFunction       : 
#    4|     mu0_1(Object)              = AliasedDefinition   : 
#    4|     mu0_2(Object)              = UnmodeledDefinition : 
#    4|     r0_3(lval<test_variables>) = InitializeThis      : 
#    5|     r0_4(lval<Int32>)          = VariableAddress[x]  : 
#    5|     mu0_5(Int32)               = Uninitialized[x]    : &:r0_4
#    5|     r0_6(lval<Int32>)          = VariableAddress[y]  : 
#    5|     r0_7(Int32)                = Constant[5]         : 
#    5|     mu0_8(Int32)               = Store               : &:r0_6, r0_7
#    6|     r0_9(Int32)                = Constant[4]         : 
#    6|     r0_10(lval<Int32>)         = VariableAddress[x]  : 
#    6|     mu0_11(Int32)              = Store               : &:r0_10, r0_9
#    7|     r0_12(lval<Int32>)         = VariableAddress[y]  : 
#    7|     r0_13(Int32)               = Load                : &:r0_12, ~mu0_2
#    7|     r0_14(lval<Int32>)         = VariableAddress[x]  : 
#    7|     mu0_15(Int32)              = Store               : &:r0_14, r0_13
#    8|     r0_16(lval<Int32>)         = VariableAddress[z]  : 
#    8|     r0_17(lval<Int32>)         = VariableAddress[y]  : 
#    8|     r0_18(Int32)               = Load                : &:r0_17, ~mu0_2
#    8|     mu0_19(Int32)              = Store               : &:r0_16, r0_18
#    4|     v0_20(Void)                = ReturnVoid          : 
#    4|     v0_21(Void)                = UnmodeledUse        : mu*
#    4|     v0_22(Void)                = ExitFunction        : 
